@import "tailwindcss";

:root {
  --color-cream: #f5f0e6; /* or your exact cream hex */
  --color-gold: #d4af37;  /* already defined, just confirming */
}

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --font-serif: var(--font-serif); 
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
:root {
  /* BRAND (use these for nameplate + teal button) */
  --color-teal: #0E3A3B;     /* ← the darker turquoise you were using */
  --color-cream: #F4F1EA;
  --color-gold: #C9A227;

  /* Section shades (keep everything dark) */
  --color-teal-900: #062B2C;
  --color-teal-800: #0B3536;
  --color-teal-700: #0E3A3B; /* same as --color-teal */
  --color-teal-750: #11443a;
  --color-teal-850: #11443a;
}

/* Map font variables to utility classes */
.font-sans { font-family: var(--font-sans), ui-sans-serif, system-ui; }
.font-serif { font-family: var(--font-serif), ui-serif, Georgia, serif; }
html { scroll-behavior: smooth; }

/* === Global readability + typography defaults === */
@layer base {
  html { @apply antialiased; }

  /* Body copy: higher contrast + more breathing room */
  body { @apply text-[var(--color-cream)] leading-loose; }

  /* Paragraphs & list items: consistent spacing/legibility */
  p, li { @apply leading-loose; }
  ul { @apply space-y-3; }

  /* Headings: full-opacity cream by default */
  h1, h2, h3, h4 {
    @apply text-[var(--color-cream)];
  }

  /* Small/secondary text */
  small, .muted { @apply text-[var(--color-cream)]; }
}

/* Handy utilities you can reuse anywhere */
@layer utilities {
  /* Gold eyebrow / subhead (your yellow section headings) */
  .eyebrow-gold { @apply font-serif text-xl text-[var(--color-gold)]; }

  /* Primary body copy block (use on <div> that wraps text) */
  .copy { @apply text-[var(--color-cream)] leading-loose; }

  /* Slightly larger lead-in paragraph */
  .lead { @apply text-lg md:text-xl text-[var(--color-cream)]; }
}
:root {
  --color-cream: #f5f0e6; /* or your exact cream hex */
  --color-gold: #d4af37;  /* already defined, just confirming */
}

/* Make all body text cream by default */
body {
  @apply text-[var(--color-cream)];
 background-color: var(--color-teal-850); /* keep your background consistent */
}

/* Headings also cream by default */
h1, h2, h3, h4, h5, h6 {
  color: var(--color-cream);
}

/* globals.css */
.link {
  text-decoration: none;
  box-shadow: inset 0 -1px 0 0 var(--color-cream);
  transition: box-shadow 0.18s ease;
}
.link:hover {
  box-shadow: inset 0 -2px 0 0 var(--color-cream);
}

/* Active nav underline (subtle, matches .link hover thickness) */
.nav-active {
  box-shadow: inset 0 -2px 0 0 var(--color-cream);
}

/* Keep the newsletter card the same visual width in landscape as portrait */
.footer-card-portrait {
  /* default (portrait): nothing special; Tailwind handles it */
}

/* --- Newsletter card behaviors --- */

/* Default (portrait): centered, capped like you have now */
.newsletter-card {
  width: 100%;
  max-width: 520px;
  margin-left: auto;
  margin-right: auto;
}

/* Landscape: make it extend full container width (like desktop) */
@media (orientation: landscape) {
  .newsletter-card--extend {
    max-width: none;     /* remove the 520px cap */
    width: 100%;         /* fill the available width */
  }
}

/* If you ever want the *same portrait width* in landscape instead, use this variant: */
@media (orientation: landscape) {
  .newsletter-card--portrait-lock {
    width: min(100vh, 520px);  /* approximate portrait width using short side */
    max-width: none;
  }
}

/* Cap the mobile footer width in landscape only */
@media (orientation: landscape) {
  .mobile-footer-cap {
    max-width: 700px;     /* adjust as needed — try 600–800px */
    margin-left: auto;
    margin-right: auto;
  }
}

/* iPad Safari only + the two orientations of the 1366×1024 iPad Pro (and you can add others) */
@supports (-webkit-touch-callout: none) {
  @media screen and (width: 1366px) and (height: 1024px),
         screen and (width: 1024px) and (height: 1366px) {
    html, body { overflow-x: clip; }      /* or overflow-x: hidden; */
    .zoomwrap { overflow: clip; }         /* clip any transform “leak” */
  }
}

@supports (-webkit-touch-callout: none) {
  @media screen and (width: 1024px) and (height: 768px),
         screen and (width: 768px) and (height: 1024px) {
    html, body { overflow-x: clip; }
    .zoomwrap { overflow: clip; }
  }
}

/* =========================================
   0) Base stability (safe everywhere)
   ========================================= */
html {
  /* Prevent iOS auto text zooming that can change computed sizes */
  -webkit-text-size-adjust: 100%;
  /* Slightly crisper type on WebKit */
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

/* =========================================
   1) Zoom CSS variables (defaults + guards)
   Your wrappers already read:
     --z     (portrait)
     --zoomL (landscape)
   ========================================= */

/* Default to "no zoom" — the hook will set real values under 900px */
:root {
  --z: 1;
  --zoomL: 1;
}

/* ⚠️ Removed the SSR fallback that set --z/--zoomL for phones.
   (That was causing the “arrive very zoomed-in” first paint.) */

/* =========================================
   2) iPhone-ish landscape text width helpers
   Use these classes in JSX where you want narrower content on phone landscape.
   They do NOT affect desktop/tablet/portrait.
   ========================================= */

/* ~ iPhone landscape (short height) general cap */
@media (orientation: landscape) and (max-width: 900px) and (max-height: 430px) {
  .narrow-landscape-80 {
    /* Pick your preferred reading width */
    max-width: 80ch;        /* change to 70ch (tighter) or 90ch (wider) if desired */
    margin-left: auto;
    margin-right: auto;
    justify-self: center;   /* grid-friendly centering */
  }
}

/* Wider variant, if you want it available */
@media (orientation: landscape) and (max-width: 900px) and (max-height: 430px) {
  .narrow-landscape-70 {
    max-width: 70ch;
    margin-left: auto;
    margin-right: auto;
    justify-self: center;
  }
}

/* --- Block all zoom transforms until JS flips the switch --- */
html.zoom-not-ready [class*="\[transform:scale(var(--z))\]"],
html.zoom-not-ready [class*="\[transform:scale(var(--zoomL))\]"] {
  transform: none !important;
}

html.zoom-not-ready [class*="\[width:calc(100%/var(--z))\]"],
html.zoom-not-ready [class*="\[width:calc(100%/var(--zoomL))\]"] {
  width: 100% !important;
}

/* Optional: tame layout jank without flashing */
html.zoom-not-ready * { transition: none !important; }

html { -webkit-text-size-adjust: 100%; -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility; }
input, select, textarea { font-size: 16px; }
@supports (height: 100svh) { .use-stable-vh { height: 100svh; } }

:root { --z: 1; --zoomL: 1; }
@media (min-width: 900px) { :root { --z: 1; --zoomL: 1; } }

/* (Do NOT include opacity: 0 in any kill-switch CSS in globals) */
/* === 3) Counter-scale only when wrapper zoom is ON (phones under 900px) === */
/* Keep just one set of selectors to avoid double-application. */
[data-zoom="on"] .zoom-exempt {
  transform-origin: top left;
  transform: scale(calc(1 / var(--z))) !important;          /* portrait */
  width: calc(100% * var(--z)) !important;
}
@media (orientation: landscape) {
  [data-zoom="on"] .zoom-exempt {
    transform: scale(calc(1 / var(--zoomL))) !important;     /* landscape */
    width: calc(100% * var(--zoomL)) !important;
  }
}

/* If you also toggle html.zoom-on globally, keep this OR the block above — not both.
html.zoom-on .zoom-exempt { ... } */

/* === 4) VisualViewport (Safari page zoom) counter-scale for overlays/menus === */
/* Strengthen with !important so Tailwind utilities / zoom-exempt cannot override it. */
.vv-counter {
  transform-origin: top left !important;
  transform: scale(calc(1 / var(--vv, 1))) !important;
  width: calc(100% * var(--vv, 1)) !important;
  font-size: 16px; /* readable base inside menu */
}

/* Safety: inside a vv-counter, do NOT let zoom-exempt counter-scale again */
.vv-counter .zoom-exempt {
  transform: none !important;
  width: auto !important;
}

.scroll-area {
  overflow-y: auto;                  /* vertical only */
  -webkit-overflow-scrolling: touch; /* momentum on iOS */
  overscroll-behavior: contain;      /* no scroll chaining */
  max-height: 100svh;                /* helpful for fullscreen panels */
}

/* Do NOT lock the root globally */
html, body { overflow: visible; }

/* Optional: when a fullscreen menu is open, make sure body stays locked */
html.menu-open, body.menu-open {
  overflow: hidden !important;
}

/* iOS-only + small screens: stop rubber-band at the root */
@supports (-webkit-touch-callout: none) {
  @media (max-width: 900px) {
    html, body {
      overscroll-behavior-y: none; /* blocks pull-to-refresh on root */
    }
  }
}

/* Default = no special behavior on desktop/tablet */
.page-scroll {
  height: auto;
  overflow: visible;
}

/* Phones only (iOS + <=900px): make the inner container the scroller */
@supports (-webkit-touch-callout: none) {
  @media (max-width: 900px) {
    .page-scroll {
      height: 100svh;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
      overscroll-behavior-y: contain; /* no bounce/chaining inside */
    }
  }
}

/* Backdrop should swallow gestures so the page beneath won’t move */
.backdrop-no-scroll { touch-action: none; }

/* Full-bleed section that ignores parent padding, stays centered */
.full-bleed {
  width: 100svw;                       /* true viewport width (safe with iOS URL bar) */
  margin-left: calc(50% - 50svw);      /* center the 100svw block inside any container */
  margin-right: calc(50% - 50svw);
}

@media (orientation: landscape) and (max-height: 430px) {
  .use-stable-vh { height: 100lvh; } /* logical vh fallback */
}

/* mobile portrait only: sensible defaults for quote marks */
@media (max-width: 767px) and (orientation: portrait) {
  .q-mobile {
    /* same visual size you had before */
    --q-size: 2.25rem;   /* controls quote mark size */
    --q-x: 0.55em;       /* how far the CLOSE quote sits from the right edge */
    --q-y: 0.95em;       /* vertical breathing room so quotes don't hit the caption */
    padding-bottom: calc(var(--q-size) + 0.8em); /* keeps close quote above figcaption */
  }
}

/* Mobile portrait: larger quote text + auto-placed quote marks */
@media (max-width: 767px) and (orientation: portrait) {
  /* Apply this class to each mobile blockquote in Testimonials */
  .t-quote {
    /* Bigger, responsive quote text */
    font-size: clamp(20px, 4.9vw, 26px);
    line-height: 1.3;
    position: relative;

    /* Quote mark sizes & insets (all in em so they scale with font-size) */
    --q-size: 1.65em;    /* size of “ and ” */
    --q-inset-x: 0.45em; /* distance from right edge for the closing quote */
    --q-inset-y: 0.85em; /* distance from bottom edge for the closing quote */
    --q-open-left: -0.75rem;
    --q-open-top: -0.25rem;

    /* Keep room for the closing quote above the figcaption */
    padding-bottom: calc(var(--q-size) + 0.7em);
  }

  /* Opening quote (top-left) */
  .t-quote [data-q="open"] {
    position: absolute;
    left: var(--q-open-left);
    top: var(--q-open-top);
    font-size: var(--q-size);
    line-height: 1;
    opacity: 0.2;
    pointer-events: none;
    user-select: none;
  }

  /* Closing quote (bottom-right) */
  .t-quote [data-q="close"] {
    position: absolute;
    right: var(--q-inset-x);
    bottom: var(--q-inset-y);
    font-size: var(--q-size);
    line-height: 1;
    opacity: 0.2;
    pointer-events: none;
    user-select: none;
  }
}

/* Optional: mobile landscape can be a touch smaller if you like */
@media (max-width: 767px) and (orientation: landscape) {
  .t-quote {
    font-size: clamp(18px, 3.8vw, 22px);
    --q-size: 1.5em;
    --q-inset-x: 0.45em;
    --q-inset-y: 0.75em;
    --q-open-left: -0.65rem;
    --q-open-top: -0.2rem;
    padding-bottom: calc(var(--q-size) + 0.6em);
  }
}

/* iPad portrait (iPad Pro width = 1024) — shrink top-right nameplate */
@media (min-width: 768px) and (max-width: 1045px) and (orientation: portrait) {
  /* this anchor is rendered right after <header> in your component */
  header + a.font-serif.uppercase[href="/"] > span {
    font-size: 1.125rem !important; /* was lg:text-xl (≈1.25rem) */
    line-height: 1.1;
    letter-spacing: -0.01em;
  }
  header + a.font-serif.uppercase[href="/"] > sup {
    font-size: 0.9rem !important;
  }
}